import { useCallback, useRef, useState } from "react";

const useLongPress = (
    onLongPress:(e:React.PointerEvent)=>void,
    onClick:(e:React.PointerEvent)=>void,
    { shouldPreventDefault = true, delay = 300 } = {}
    ) => {
    const [longPressTriggered, setLongPressTriggered] = useState(false);
    const timeout = useRef<NodeJS.Timeout>();
    const target = useRef<EventTarget>();

    const start:(e:React.PointerEvent)=>void = useCallback(
        event => {
            if (shouldPreventDefault && event.target) {
                    event.target.addEventListener("touchend", preventDefault, {
                    passive: false
                });
                target.current = event.target;
            }
            timeout.current = setTimeout(() => {
                onLongPress(event);
                setLongPressTriggered(true);
            }, delay);
        },
        [onLongPress, delay, shouldPreventDefault]
    );

    const clear = useCallback(
        (event, shouldTriggerClick = true) => {
            timeout.current && clearTimeout(timeout.current);
            shouldTriggerClick && !longPressTriggered && onClick();
            setLongPressTriggered(false);
            if (shouldPreventDefault && target.current) {
                target.current.removeEventListener("touchend", preventDefault);
            }
        },
        [shouldPreventDefault, onClick, longPressTriggered]
    );

    return {
        onPointerDown: (e:React.PointerEvent) => start(e),
        // onTouchStart: (e:React.PointerEvent) => start(e),
        onPointerUp: (e:React.PointerEvent) => clear(e),
        onMouseLeave: (e:React.PointerEvent) => clear(e, false),
        // onTouchEnd: (e:React.PointerEvent) => clear(e)
    };
};

// const isTouchEvent = event => {
// return "touches" in event;
// };

// const preventDefault = event => {
// if (!isTouchEvent(event)) return;

// if (event.touches.length < 2 && event.preventDefault) {
//     event.preventDefault();
// }
// };

export default useLongPress;
